require "scripts/board"

local BOARD_SIZE = 12
local MINE_COUNT = 20 -- ~14%

local HORSE_LOOP_DURATION = 5
local HORSE_POWER = 400
local HORSE_THROW_SPEED = 2

local horses = {
	{
		name = "TestHorse",
		sprite = "normiz",
		grenade = "regular",
		controlled = false,
		id = 1,
		go = nil
	},
	{
		name = "Player",
		sprite = "normiz",
		grenade = "regular",
		controlled = true,
		id = 2,
		go = nil
	},
	{
		name = "TestHorse2",
		sprite = "normiz",
		grenade = "regular",
		controlled = false,
		id = 3,
		go = nil
	},
	{
		name = "TestHorse3",
		sprite = "normiz",
		grenade = "regular",
		controlled = false,
		id = 4,
		go = nil
	},
	{
		name = "TestHorse4",
		sprite = "normiz",
		grenade = "regular",
		controlled = false,
		id = 5,
		go = nil
	},
	{
		name = "TestHorse5",
		sprite = "normiz",
		grenade = "regular",
		controlled = false,
		id = 6,
		go = nil
	},
	{
		name = "TestHorse6",
		sprite = "normiz",
		grenade = "regular",
		controlled = false,
		id = 7,
		go = nil
	},
}
-- TODO: calc based on user's screensize
local edges = { -- from NE clockwise
	vmath.vector3(68, 1068, 0),
	vmath.vector3(572, 1068, 0),
	vmath.vector3(572, 564, 0),
	vmath.vector3(68, 564, 0),
}
local active = false
local start = nil

math.randomseed(os.time())
local board = generate_board(BOARD_SIZE, BOARD_SIZE, MINE_COUNT, "/tilemap#tilemap")

local function move_horses()
	local hlen = #horses
	local passed_time = socket.gettime() - start
	for key, horse in pairs(horses) do
		local mod = (passed_time / HORSE_LOOP_DURATION + horse["id"] / hlen) % 1

		-- Horses are moving clockwise along the edges of the cube
		-- So we are grouping them by edges to get start/end points (each is 1/4th of entire path)
		-- And then lerping between them
		local edge = math.floor(mod / 0.25)
		local point_a = edges[edge+1]
		local point_b = edges[(edge+1)%4+1]
		
		mod = (mod / 0.25) % 1 -- Get progress on the current edge
		local point = vmath.lerp(mod, point_a, point_b)
		go.set_position(point, horse["go"])
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	start = socket.gettime()

	draw_board(board)

	-- Create horses
	for key, horse in pairs(horses) do
		local id = factory.create("/horses#horse-factory")
		msg.post(id, "init", horse)
		horse["go"] = id
	end

	-- Place horses
	move_horses()

	-- Start
	active = true
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

local grenades = {}
local trails = {}
for i = 1, 8 do -- For 8 trails
	trails[i] = {
		id = "/trail" .. i,
		active = false,
		tick = 0
	}
end
function update(self, dt)
	move_horses() 

	-- move trails
	for k, v in pairs(grenades) do
		if v["trail"] then
			local trail = trails[v["trail"]]
			local pos = go.get_position(v["id"])
			go.set_position(pos, trail["id"])
			if trail["tick"] <= 5 then
				trail["tick"] = trail["tick"] + 1
				msg.post(trail["id"] .. "#trail_maker", "reset", {})
			end
		end
	end
end

local function assign_trail(id) 
	for k, v in pairs(trails) do
		if not v["active"] then
			table.insert(grenades, {id=id, trail=k})
			v["active"] = true
			v["tick"] = 0
			break
		end
	end
end

local GRENADE = hash("grenade")
local BOOM = hash("boom")
function on_message(self, message_id, message, sender)
	if message_id == GRENADE then -- Throwing grenades
		for key, horse in pairs(horses) do
			if horse["controlled"] then
				local id = factory.create("/horses#grenade-factory")
				local pos = go.get_position(horse["go"]) + vmath.vector3(0, 0, 0.1) -- +0.1 to move sprite over tilemap
				msg.post(id, "init", {
					origin = pos,
					target = pos+message["offsetmod"]*HORSE_POWER,
					duration = HORSE_THROW_SPEED,
					owner = horse["id"],
					id = id
				})
				assign_trail(id)
			end
		end
	elseif message_id == BOOM then
		print(sender)
		-- TODO: boom

		for k, v in pairs(grenades) do
			local id = message["id"]
			if v["id"] == id then
				local trail = trails[v["trail"]]
				trail["active"] = false
				table.remove(grenades, k)
				break
			end
		end
	end
end

local TOUCH = hash("touch")
function on_input(self, action_id, action)
	-- {"pressed":false,"y":342.5,"screen_y":342,"dx":0,"value":0,"released":true,"repeated":false,"screen_dx":0,"screen_dy":0,"screen_x":332,"dy":0,"x":332.5}
	if action_id == TOUCH and action.pressed then
		-- If tilemap is pressed. Temp
		local pos = go.get_position("/tilemap#tilemap")
		local scale = go.get_scale("/tilemap")
		local size = 64*12*scale.x

		local dx = action.x - pos.x
		local dy = action.y - pos.y
		if dx > 0 and dx < size and dy > 0 and dy < size then
			local tilex = math.floor(dx/64/scale.x)+1
			local tiley = math.floor(dy/64/scale.x)+1

			click_board(board, tilex, tiley)
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
