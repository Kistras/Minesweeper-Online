local GGG = require "scripts.global"

local function show(self, proxy)
	print(json.encode(GGG.screen_stack), "->", proxy)
	if self.current_proxy then
		msg.post(self.current_proxy, "unload")
		self.current_proxy = nil
	end
	msg.post(proxy, "async_load")
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })
	self.current_proxy = nil
	msg.post("#", "show_menu")
end

function final(self)
	-- Add finalization code here
end

function update(self, dt)
	-- Add update code here
end

function fixed_update(self, dt)
	-- Add fixed update code here
end

local function handle_proxy_loaded(self, sender)
	self.current_proxy = sender
	msg.post(sender, "enable")
end

local function handle_proxy_unloaded(sender)
	print("Unloaded", sender)
end

local function handle_back(self)
	local screen = table.remove(GGG.screen_stack, #GGG.screen_stack)
	if screen then
		show(self, screen)
	else
		msg.post("@system:", "exit", {code = 0})
	end
end

function on_message(self, message_id, message, sender)
	print(message_id, json.encode(message), sender)
	
	local proxy_map = {
		[hash("show_menu")] = "#menuproxy",
		[hash("show_play")] = "#gameproxy",
		[hash("show_shop")] = "#shopproxy",
		[hash("show_scoreboards")] = "#scoreboardsproxy",
		[hash("show_lobby")] = "#lobbyproxy",
		[hash("show_results")] = "#resultsproxy",
		[hash("show_settings")] = "#settingsproxy"
	}
	
	if proxy_map[message_id] then
		GGG.current_screen = proxy_map[message_id]
		table.insert(GGG.screen_stack, self.current_proxy)
		show(self, proxy_map[message_id])
	elseif message_id == hash("proxy_loaded") then
		handle_proxy_loaded(self, sender)
	elseif message_id == hash("proxy_unloaded") then
		handle_proxy_unloaded(sender)
	elseif message_id == hash("back") then
		handle_back(self)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
end

function on_reload(self)
	-- Add reload-handling code here
end
